package co.grandcircus.EmployeeApi.Controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.*;

import co.grandcircus.EmployeeApi.EmployeeNotFoundException;
import co.grandcircus.EmployeeApi.Model.Employee;
import co.grandcircus.EmployeeApi.Model.Schedule;
import co.grandcircus.EmployeeApi.Model.Shift;
import co.grandcircus.EmployeeApi.Repos.EmployeeRepository;
import co.grandcircus.EmployeeApi.Repos.ShiftRepository;

@RestController
public class EmployeeController {
	
	@Autowired
	EmployeeRepository repo;
	@Autowired ShiftRepository shiftRepo;
	
	@GetMapping("/")
	public List<Employee> listAllEmployees(){
		return repo.findAll();
	}
	
	@GetMapping("/{id}")
	public Employee getOneEmployee(@PathVariable("id") String id) {
		return repo.findById(id).orElseThrow(() -> new EmployeeNotFoundException(id));
	}
	
	@PostMapping("/") 
	@ResponseStatus(HttpStatus.CREATED)
	public Employee createEmployee(@RequestBody Employee employee) {
		return repo.insert(employee);
	}
	
	@DeleteMapping("/{id}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void deleteEmployee(@PathVariable("id")String id) {
		repo.deleteById(id);
	}
	
	@PutMapping("/{id}")
	public Employee updateEmployee(@RequestBody Employee employee, @PathVariable("id") String id) {
		employee.setId(id);
		return repo.save(employee);
	}
	
	
	@DeleteMapping("/delete/{shiftId}/{id}")
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void deleteShift(@PathVariable Integer shiftId, @PathVariable String id) {
		List<Shift> shiftList = repo.findById(id).get().getSchedule().getShiftList();
		for (Shift shift : shiftList) {
			System.out.println("-->" +shiftId + "<--");
			if (shift.getShiftId() == shiftId) {
				
				System.out.println("Deleted " + shiftId + id);
				
				shiftRepo.deleteById(shiftId);
			}
		}
		System.out.println("Out");
			
	}
	@ResponseBody
	@ExceptionHandler(EmployeeNotFoundException.class)
	@ResponseStatus(HttpStatus.NOT_FOUND)
	String characterNotFoundHandler(EmployeeNotFoundException ex) {
		return ex.getMessage();
	}

}
